// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: lec-07-prg-03-clientstreaming/clientstreaming.proto

package lec_07_prg_03_clientstreaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientStreaming_GetServerResponse_FullMethodName = "/ClientStreaming/GetServerResponse"
)

// ClientStreamingClient is the client API for ClientStreaming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientStreamingClient interface {
	// A Client streaming RPC.
	GetServerResponse(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Message, Number], error)
}

type clientStreamingClient struct {
	cc grpc.ClientConnInterface
}

func NewClientStreamingClient(cc grpc.ClientConnInterface) ClientStreamingClient {
	return &clientStreamingClient{cc}
}

func (c *clientStreamingClient) GetServerResponse(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Message, Number], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClientStreaming_ServiceDesc.Streams[0], ClientStreaming_GetServerResponse_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Message, Number]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientStreaming_GetServerResponseClient = grpc.ClientStreamingClient[Message, Number]

// ClientStreamingServer is the server API for ClientStreaming service.
// All implementations must embed UnimplementedClientStreamingServer
// for forward compatibility.
type ClientStreamingServer interface {
	// A Client streaming RPC.
	GetServerResponse(grpc.ClientStreamingServer[Message, Number]) error
	mustEmbedUnimplementedClientStreamingServer()
}

// UnimplementedClientStreamingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientStreamingServer struct{}

func (UnimplementedClientStreamingServer) GetServerResponse(grpc.ClientStreamingServer[Message, Number]) error {
	return status.Errorf(codes.Unimplemented, "method GetServerResponse not implemented")
}
func (UnimplementedClientStreamingServer) mustEmbedUnimplementedClientStreamingServer() {}
func (UnimplementedClientStreamingServer) testEmbeddedByValue()                         {}

// UnsafeClientStreamingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientStreamingServer will
// result in compilation errors.
type UnsafeClientStreamingServer interface {
	mustEmbedUnimplementedClientStreamingServer()
}

func RegisterClientStreamingServer(s grpc.ServiceRegistrar, srv ClientStreamingServer) {
	// If the following call pancis, it indicates UnimplementedClientStreamingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientStreaming_ServiceDesc, srv)
}

func _ClientStreaming_GetServerResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientStreamingServer).GetServerResponse(&grpc.GenericServerStream[Message, Number]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClientStreaming_GetServerResponseServer = grpc.ClientStreamingServer[Message, Number]

// ClientStreaming_ServiceDesc is the grpc.ServiceDesc for ClientStreaming service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientStreaming_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClientStreaming",
	HandlerType: (*ClientStreamingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetServerResponse",
			Handler:       _ClientStreaming_GetServerResponse_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "lec-07-prg-03-clientstreaming/clientstreaming.proto",
}
